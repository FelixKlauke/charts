---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-build
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knative-build-admin
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  - secrets
  - events
  - serviceaccounts
  - configmaps
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - build.knative.dev
  resources:
  - builds
  - buildtemplates
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-controller
  namespace: knative-build
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: build-controller-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-build-admin
subjects:
- kind: ServiceAccount
  name: build-controller
  namespace: knative-build
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: builds.build.knative.dev
spec:
  group: build.knative.dev
  names:
    kind: Build
    plural: builds
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: buildtemplates.build.knative.dev
spec:
  group: build.knative.dev
  names:
    kind: BuildTemplate
    plural: buildtemplates
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: build-controller
  name: build-controller
  namespace: knative-build
spec:
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: build-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: build-webhook
  name: build-webhook
  namespace: knative-build
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    role: build-webhook
---
apiVersion: v1
data:
  loglevel.autoscaler: info
  loglevel.controller: info
  loglevel.queueproxy: info
  loglevel.webhook: info
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "sampling": {
        "initial": 100,
        "thereafter": 100
      },
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
kind: ConfigMap
metadata:
  name: config-logging
  namespace: knative-build
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: build-controller
  namespace: knative-build
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: build-controller
    spec:
      containers:
      - args:
        - -builder
        - cluster
        - -logtostderr
        - -stderrthreshold
        - INFO
        - -creds-image
        - gcr.io/knative-releases/github.com/knative/build/cmd/creds-init@sha256:a47ea977bef1889c4b29d8dd5c28af923c40a61c12e823d1da6ff0cbeeb41d6d
        - -git-image
        - gcr.io/knative-releases/github.com/knative/build/cmd/git-init@sha256:15fac1ab6052706749695418845834f53070df0e6d4778b7225c5ce0af8ca160
        image: gcr.io/knative-releases/github.com/knative/build/cmd/controller@sha256:6c88fa5ae54a41182d9a7e9795c3a56f7ef716701137095a08f24ff6a3cca37d
        name: build-controller
      serviceAccountName: build-controller
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: build-webhook
  namespace: knative-build
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: build-webhook
        role: build-webhook
    spec:
      containers:
      - args:
        - -builder
        - cluster
        - -logtostderr
        - -stderrthreshold
        - INFO
        image: gcr.io/knative-releases/github.com/knative/build/cmd/webhook@sha256:8c894b1f4ad5d89e31d1e4fba0db2bc5930931a48f3d5ac988b66c2c3f82e849
        name: build-webhook
        volumeMounts:
        - mountPath: /etc/config-logging
          name: config-logging
      serviceAccountName: build-controller
      volumes:
      - configMap:
          name: config-logging
        name: config-logging
---
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knative-serving-admin
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  - secrets
  - configmaps
  - endpoints
  - services
  - events
  - serviceaccounts
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - configurations
  - configurationgenerations
  - routes
  - revisions
  - revisionuids
  - autoscalers
  - services
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - build.knative.dev
  resources:
  - builds
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knative-serving-write
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  - secrets
  - configmaps
  - endpoints
  - services
  - events
  - serviceaccounts
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  - deployments
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - configurations
  - configurationgenerations
  - routes
  - revisions
  - revisionuids
  - autoscalers
  - services
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - build.knative.dev
  resources:
  - builds
  verbs:
  - get
  - list
  - update
  - patch
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller
  namespace: knative-serving
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autoscaler
  namespace: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: knative-serving-controller-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-serving-admin
subjects:
- kind: ServiceAccount
  name: controller
  namespace: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: knative-serving-autoscaler-write
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-serving-write
subjects:
- kind: ServiceAccount
  name: autoscaler
  namespace: knative-serving
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: knative-shared-gateway
  namespace: knative-serving
spec:
  selector:
    knative: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - '*'
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: PASSTHROUGH
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: ingressgateway-0.8.0
    heritage: Tiller
    knative: ingressgateway
    release: RELEASE-NAME
  name: knative-ingressgateway
  namespace: istio-system
spec:
  ports:
  - name: http
    nodePort: 32380
    port: 80
  - name: https
    nodePort: 32390
    port: 443
  - name: tcp
    nodePort: 32400
    port: 32400
  selector:
    knative: ingressgateway
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: knative-ingressgateway
    chart: ingressgateway-0.8.0
    heritage: Tiller
    knative: ingressgateway
    release: RELEASE-NAME
  name: knative-ingressgateway
  namespace: istio-system
spec:
  replicas: null
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        knative: ingressgateway
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - proxy
        - router
        - -v
        - "2"
        - --discoveryRefreshDelay
        - 1s
        - --drainDuration
        - 45s
        - --parentShutdownDuration
        - 1m0s
        - --connectTimeout
        - 10s
        - --serviceCluster
        - knative-ingressgateway
        - --zipkinAddress
        - zipkin:9411
        - --statsdUdpAddress
        - istio-statsd-prom-bridge:9125
        - --proxyAdminPort
        - "15000"
        - --controlPlaneAuthPolicy
        - NONE
        - --discoveryAddress
        - istio-pilot:8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/istio/proxyv2:0.8.0
        imagePullPolicy: IfNotPresent
        name: ingressgateway
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 32400
        resources: {}
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          readOnly: true
      serviceAccountName: istio-ingressgateway-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.default
      - name: ingressgateway-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-certs
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: knative-ingressgateway
  namespace: istio-system
spec:
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 60
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: knative-ingressgateway
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: configurations.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    kind: Configuration
    plural: configurations
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: revisions.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    kind: Revision
    plural: revisions
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: routes.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    kind: Route
    plural: routes
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: services.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    kind: Service
    plural: services
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: activator
  name: activator-service
  namespace: knative-serving
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: activator
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controller
  name: controller
  namespace: knative-serving
spec:
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: webhook
  name: webhook
  namespace: knative-serving
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    role: webhook
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: activator
  namespace: knative-serving
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: activator
        role: activator
    spec:
      containers:
      - args:
        - -logtostderr=true
        - -stderrthreshold=INFO
        image: gcr.io/knative-releases/github.com/knative/serving/cmd/activator@sha256:486d806e33f487d2475d1ff70eb5dcff51cf62a16f4b9af06788674b60b1f2ef
        name: activator
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - mountPath: /etc/config-logging
          name: config-logging
      serviceAccountName: controller
      volumes:
      - configMap:
          name: config-logging
        name: config-logging
---
apiVersion: v1
data:
  concurrency-quantum-of-time: 100ms
  enable-scale-to-zero: "true"
  enable-vertical-pod-autoscaling: "false"
  max-scale-up-rate: "10"
  multi-concurrency-target: "1.0"
  panic-window: 6s
  scale-to-zero-threshold: 5m
  single-concurrency-target: "0.9"
  stable-window: 60s
  vpa-multi-concurrency-target: "10.0"
kind: ConfigMap
metadata:
  name: config-autoscaler
  namespace: knative-serving
---
apiVersion: v1
data:
  autoscalerImage: gcr.io/knative-releases/github.com/knative/serving/cmd/autoscaler@sha256:2a9931ab1cbe6efeec43a47517163622002e0dc2ea5d6ffa0d0e546c2c94b841
  queueSidecarImage: gcr.io/knative-releases/github.com/knative/serving/cmd/queue@sha256:65b4824c5f21134a1b8373cbc2be8d431744f06caf118a309f94b6514cd6f40c
  registriesSkippingTagResolving: ko.local,dev.local
kind: ConfigMap
metadata:
  name: config-controller
  namespace: knative-serving
---
apiVersion: v1
data:
  {{ .Values.domain }}: ""
kind: ConfigMap
metadata:
  name: config-domain
  namespace: knative-serving
---
apiVersion: v1
data:
  loglevel.activator: info
  loglevel.autoscaler: info
  loglevel.controller: info
  loglevel.queueproxy: info
  loglevel.webhook: info
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
kind: ConfigMap
metadata:
  name: config-logging
  namespace: knative-serving
---
apiVersion: v1
data:
  istio.sidecar.includeOutboundIPRanges: '*'
kind: ConfigMap
metadata:
  name: config-network
  namespace: knative-serving
---
apiVersion: v1
data:
  logging.enable-var-log-collection: "false"
  logging.fluentd-sidecar-image: k8s.gcr.io/fluentd-elasticsearch:v2.0.4
  logging.fluentd-sidecar-output-config: |
    # Parse json log before sending to Elastic Search
    <filter **>
      @type parser
      key_name log
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key fluentd-time # fluentd-time is reserved for structured logs
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format none
          message_key log
        </pattern>
      </parse>
    </filter>
    # Send to Elastic Search
    <match **>
      @id elasticsearch
      @type elasticsearch
      @log_level info
      include_tag_key true
      # Elasticsearch service is in monitoring namespace.
      host elasticsearch-logging.monitoring
      port 9200
      logstash_format true
      <buffer>
        @type file
        path /var/log/fluentd-buffers/kubernetes.system.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size 2M
        queue_limit_length 8
        overflow_action block
      </buffer>
    </match>
  logging.revision-url-template: |
    http://localhost:8001/api/v1/namespaces/monitoring/services/kibana-logging/proxy/app/kibana#/discover?_a=(query:(match:(kubernetes.labels.knative-dev%2FrevisionUID:(query:'${REVISION_UID}',type:phrase))))
kind: ConfigMap
metadata:
  name: config-observability
  namespace: knative-serving
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: controller
  namespace: knative-serving
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: controller
    spec:
      containers:
      - image: gcr.io/knative-releases/github.com/knative/serving/cmd/controller@sha256:59abc8765d4396a3fc7cac27a932a9cc151ee66343fa5338fb7146b607c6e306
        name: controller
        ports:
        - containerPort: 9090
          name: metrics
        volumeMounts:
        - mountPath: /etc/config-logging
          name: config-logging
      serviceAccountName: controller
      volumes:
      - configMap:
          name: config-logging
        name: config-logging
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: webhook
  namespace: knative-serving
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: webhook
        role: webhook
    spec:
      containers:
      - image: gcr.io/knative-releases/github.com/knative/serving/cmd/webhook@sha256:7196a38aaf11ed6426db7c40a771e4f2a27d987606b5773b2d05bb9676908e7d
        name: webhook
        volumeMounts:
        - mountPath: /etc/config-logging
          name: config-logging
      serviceAccountName: controller
      volumes:
      - configMap:
          name: config-logging
        name: config-logging
---
